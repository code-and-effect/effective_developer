#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# https://github.com/git/git/blob/master/templates/hooks--pre-push.sample

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
  if [ "$local_sha" = $z40 ]; then
    : # Handle delete
  else
    if [ "$remote_sha" = $z40 ]; then
      range="$local_sha"                # New branch, examine all commits
    else
      range="$remote_sha..$local_sha"   # Update to existing branch, examine new commits
    fi

    # Check for binding.pry
    found=`git diff | grep + | grep binding.pry`

    if [ -n "$found" ]; then
      echo >&2 "GIT PUSH BLOCKED: Found binding.pry"; exit 1
    fi

    # Check for Gemfile locally bundled gems
    found=`git diff -- Gemfile | grep + | grep "path:"`
    found2=`git diff -- Gemfile | grep + | grep ":path"`

    if [ -n "$found" ]; then
      echo >&2 "GIT PUSH BLOCKED: Found path: in Gemfile"; exit 1
    fi

    if [ -n "$found2" ]; then
      echo >&2 "GIT PUSH BLOCKED: Found :path in Gemfile"; exit 1
    fi

  fi
done

exit 0
